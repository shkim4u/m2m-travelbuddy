version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  variables:
    REGION: "ap-northeast-2"
    ENVIRONMENT: test
#run-as: root
phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - apt-get update
      - apt-get install -y jq
      - apt-get install -y cloc
      - apt-get install -y bc
      - pip install sarif-tools
      - sarif --version
  pre_build:
    commands:
      - echo "Print awscli version"
      - aws --version
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output=text) && echo $AWS_ACCOUNT_ID
      - echo "### SRC_VERISON-> ${CODEBUILD_RESOLVED_SOURCE_VERSION} | Logging-in to ECR"
      - docker login --username AWS -p $(aws ecr get-login-password --region ${REGION}) ${ECR_REPO_URI}
      #     Mix with one alphabet "t" to avoid floating type conversion in helm operation.
      - export TAG="t${CODEBUILD_RESOLVED_SOURCE_VERSION}"
      - export TAG=$(echo $TAG | sed -e "s/\.//g" | tr '[:upper:]' '[:lower:]')
      - export TAG=$(echo "${TAG:0:8}")
      - export IMAGE_TAG="${TAG}"
      - echo "## TAG-> ${TAG}"
      - env
  build:
    commands:
      - |
        echo "### Building sources ###"
        ./mvnw -q clean compile spotbugs:spotbugs install
      - |
        echo "### Building Container Image ###"
        echo $CODEBUILD_SRC_DIR
        echo Build started on `date`
        echo Building the Docker image...
        docker build -t $ECR_REPO_URI:latest ./
        docker images
        docker tag $ECR_REPO_URI:latest $ECR_REPO_URI:$IMAGE_TAG
      - |
        echo "### Checking quality and security metrics ###"
        echo "# Just printing some crucial metrics for now, with more coming soon..."
        echo "# Save vulnerability report files SpotBugs-native and SARIF format to be uploaded as artifacts later..." 
        cp target/spotbugsXml.xml spotbugs.xml
        cp target/spotbugsSarif.json spotbugs.json
        export LOC=$(cloc src | grep SUM | awk '{print $5}')
        echo "# LOC: "
        echo ${LOC}
        echo "# SpotBugs SARIF summary as follows. This information are combined with LOC to calculate NVS (Normalized Vulnerability Score) in the next step."
        export SARIF_SUMMARY=$(sarif summary spotbugs.json) && echo $SARIF_SUMMARY
        export ERRORS=$(echo ${SARIF_SUMMARY} | awk -F 'error: ' '{print $2}' | awk '{print $1}') && echo $ERRORS
        export WARNINGS=$(echo ${SARIF_SUMMARY} | awk -F 'warning: ' '{print $2}' | awk '{print $1}') && echo $WARNINGS
        export NOTES=$(echo ${SARIF_SUMMARY} | awk -F 'note: ' '{print $2}' | awk '{print $1}') && echo $NOTES
        export NVS=$(./calculate_nvs.sh ${ERRORS} ${WARNINGS} ${NOTES} ${LOC} | grep "NVS:" | awk '{print $2}')
        echo "# NVS: ${NVS}"
        echo ${NVS} > nvs.txt
      - |
        echo "### Pushing Container Image ###"
        docker push $ECR_REPO_URI:latest
        docker push $ECR_REPO_URI:$IMAGE_TAG
  post_build:
    commands:
      # Other artifacts: build output, source version, and source files archive.
      # Source files archive will be used to extract some relevant code snippets with which to get remediation action from GenAI.
      - echo "${IMAGE_TAG}" > image_tag.txt
      - echo "${CODEBUILD_RESOLVED_SOURCE_VERSION}" >> source_version.txt

      # [2023-12-24] KSH: GitOps를 위한 Helm Chart 파일에 업데이트하는 부분은 "deploy" 단계로 이동

      ### Archive files to post-process including review with Amazon Bedrock.
      - cd $CODEBUILD_SRC_DIR
      # src
      - zip -q -r src.zip src/
      # post-process
      - zip -q -r post-process.zip post-process/
    finally:
      # Vulnerability Report -> GenAI (Bedrock + Claude) -> Slack 연계 구성을 위한 정보 수집
      - |
        echo "### CodeBuild Artifacts ###"
        echo $CODEBUILD_SRC_DIR/artifacts
artifacts:
  files:
    - spotbugs.xml
    - spotbugs.json
    - nvs.txt
    - image_tag.txt
    - source_version.txt
    - pom.xml
    - src.zip
    - postprocess.yaml
    - post-process.zip
    - approval-handler.yaml
    - deployspec.yaml
