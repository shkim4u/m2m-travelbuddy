version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  variables:
    REGION: "ap-northeast-2"
    ENVIRONMENT: test
phases:
  install:
    commands:
      - apt-get update
      - apt-get update
      - apt-get install -y bc
  pre_build:
    commands:
      - echo "Print awscli version"
      - aws --version
      - echo $CODEBUILD_SRC_DIR
      - ls -al $CODEBUILD_SRC_DIR
      - env
  build:
    commands:
      - |
        # Read NVS (Normalized Vulnerability Score) from the build artifact.
        echo "### Reading NVS (Normalized Vulnerability Score) from the build artifact... ###"
        export NVS=$(cat nvs.txt) && echo "NVS: $NVS"
      - |
        # Set CodePipeline manual approval status to "Approved" if the approval is not required.
        # This is to avoid the pipeline to be stuck at the approval stage.
        # TODO: Execute this as per "NVS" in "nvs.txt" file from the build artifact and specified by the NVS (Normalized Vulnerability Score) threshold.
        if [ "${AUTO_APPROVE_BY_NVS}" == "true" ]; then
            # Check if $NVS is larger or equal to $NVS_THRESHOLD.
            if [ $(echo "$NVS >= $NVS_THRESHOLD" | bc) -eq 1 ]; then
                # Send approval request to Slack via REST API.
                echo "### Sending approval request to collaboration channel of security staff via REST API... ###"
                curl --location ${SEC_SLACK_WEBHOOK_URL} \
                --header "Content-Type: application/json" --data "{\"channel\": \"${SEC_SLACK_CHANNEL}\", \"icon-emoji\": \":warning:\", \"text\": \"Application 배포 진행 중 검출된 취약점이 기준을 초과하였습니다. 현황을 살펴보시고 배포를 승인하거나 반려하시기 바랍니다.\"}"
            else
                echo "### Setting CodePipeline approval status to Approved ###"
                # CodePipeline Name: Predefined ${CODEBUILD_INITIATOR} or ${PIPELINE_NAME}
                # Stage Name: ${STAGE_NAME}
                # Action Name: ${ACTION_NAME}
      
                #TOKEN=$(aws codepipeline get-pipeline-state --name ${PIPELINE_NAME} --query "stageStates[?stageName=='${STAGE_NAME}'].actionStates[?actionName=='${ACTION_NAME}'].latestExecution[?status=='InProgress'].token" --output text)
                # Why the hell the JMESPath is not working?
                TOKEN=$(aws codepipeline get-pipeline-state --name ${PIPELINE_NAME} --query "stageStates[?stageName=='${STAGE_NAME}'].actionStates[*].latestExecution.token" --output text) && echo $TOKEN
                # Wait while the TOKEN is empty.
                while [ -z "$TOKEN" ]; do
                    echo "### Waiting for the TOKEN to be available... ###"
                    sleep 5
                    TOKEN=$(aws codepipeline get-pipeline-state --name ${PIPELINE_NAME} --query "stageStates[?stageName=='${STAGE_NAME}'].actionStates[*].latestExecution.token" --output text) && echo $TOKEN
                done
                # TODO: Set summary value as per NVS (Normalized Vulnerability Score).
                aws codepipeline put-approval-result --pipeline-name ${PIPELINE_NAME} --stage-name ${STAGE_NAME} --action-name ${ACTION_NAME} --token ${TOKEN} --result summary="NVS: ${NVS} < NVS_THRESHOLD (TODO)",status=Approved
            fi
        fi
  post_build:
    commands:
      - |
        echo "### Approval handler post_build phase... ###"
    finally:
      - |
        echo "### post_build finally ###"
artifacts:
  files:
    - nvs.txt
