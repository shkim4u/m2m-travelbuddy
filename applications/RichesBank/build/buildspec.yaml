version: 0.2
env:
  shell: bash
  git-credential-helper: yes
  variables:
    REGION: "ap-northeast-2"
    ENVIRONMENT: test
phases:
  install:
    # runtime-versions:
    #   java: corretto11
    commands:
      - apt-get update
      - apt-get install -y jq
      - apt-get install -y cloc
      - apt-get install -y bc
      - pip install sarif-tools
      - sarif --version
  pre_build:
    commands:
      - echo "Print awscli version"
      - aws --version
      - export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output=text) && echo $AWS_ACCOUNT_ID
      - echo "### SRC_VERISON-> ${CODEBUILD_RESOLVED_SOURCE_VERSION} | Logging-in to ECR"
      - docker login --username AWS -p $(aws ecr get-login-password --region ${REGION}) ${ECR_REPO_URI}
      #     Mix with one alphabet "t" to avoid floating type conversion in helm operation.
      - export TAG="t${CODEBUILD_RESOLVED_SOURCE_VERSION}"
      - export TAG=$(echo $TAG | sed -e "s/\.//g" | tr '[:upper:]' '[:lower:]')
      - export TAG=$(echo "${TAG:0:8}")
      - export IMAGE_TAG="${TAG}"
      - echo "## TAG-> ${TAG}"
#      - echo "### Retrieving database information..."
#      - export DATABASE_ENDPOINT=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='riches-test-postgres-db'].Endpoint.Address" --output text) && echo $DATABASE_ENDPOINT
#      - export DATABASE_PORT=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='riches-test-postgres-db'].Endpoint.Port" --output text) && echo $DATABASE_PORT
#      - export DATABASE_USERNAME=$(aws secretsmanager list-secrets --filters Key=tag-value,Values="arn:aws:rds:ap-northeast-2:${AWS_ACCOUNT_ID}:db:riches-test-postgres-db" --query "SecretList[0].Name" --output text) && echo $DATABASE_USERNAME
      - export CERTIFICATE_ARN=`aws acm list-certificates --query "CertificateSummaryList[?DomainName=='www.mydemo.co.kr'].CertificateArn" --output text`
      - echo "## CERTIFICATE_ARN-> ${CERTIFICATE_ARN}"
      - env
  build:
    commands:
      - |
        echo "### Building Container Image ###"
        echo $CODEBUILD_SRC_DIR
        echo Build started on `date`
        echo Building the Docker image...
        docker build -t $ECR_REPO_URI:latest ./
        docker images
        docker tag $ECR_REPO_URI:latest $ECR_REPO_URI:$IMAGE_TAG
      - |
        echo "### Checking quality and security metrics ###"
        echo "# Just printing some crucial metrics for now, with more coming soon..."
        echo "# Save vulnerability report files SpotBugs-native and SARIF format to be uploaed as artifacts later..." 
        docker run --rm -t $ECR_REPO_URI:latest cat /usr/local/tomcat/webapps/spotbugs-xml.xml > spotbugs.xml
        docker run --rm -t $ECR_REPO_URI:latest cat /usr/local/tomcat/webapps/spotbugs-sarif.json > spotbugs.json
        export LOC=$(cloc src | grep SUM | awk '{print $5}')
        echo "# LOC: "
        echo ${LOC}
        echo "# SpotBugs SARIF summary as follows. This information are combined with LOC to calculate NVS (Normalized Vulnerability Score) in the next step."
        export SARIF_SUMMARY=$(sarif summary spotbugs.json) && echo $SARIF_SUMMARY
        export ERRORS=$(echo ${SARIF_SUMMARY} | awk -F 'error: ' '{print $2}' | awk '{print $1}') && echo $ERRORS
        export WARNINGS=$(echo ${SARIF_SUMMARY} | awk -F 'warning: ' '{print $2}' | awk '{print $1}') && echo $WARNINGS
        export NOTES=$(echo ${SARIF_SUMMARY} | awk -F 'note: ' '{print $2}' | awk '{print $1}') && echo $NOTES
        export NVS=$(./calculate_nvs.sh ${ERRORS} ${WARNINGS} ${NOTES} ${LOC} | grep "NVS:" | awk '{print $2}')
        echo "# NVS: ${NVS}"
      - |
        echo "### Pushing Container Image ###"
        docker push $ECR_REPO_URI:latest
        docker push $ECR_REPO_URI:$IMAGE_TAG
  post_build:
    commands:
      # Other artifcats: build output, source version, and source files archive.
      # Source files archive will be used to extract some relevant code snippets with which to get remediation action from GenAI.
      - echo "${IMAGE_TAG}" >> build_output.txt
      - echo "${CODEBUILD_RESOLVED_SOURCE_VERSION}" >> source_version.txt
      - git config --global --replace-all credential.helper '!aws codecommit credential-helper $@'
      #        [TODO] 아래 클론 시의 Repository URL 값도 CodeBuild의 환경변수 혹은 CloudFormation Output으로부터 주입되면 좋습니다.
      - |
        echo "### Update value to manifest repository ###"
        git clone https://git-codecommit.ap-northeast-2.amazonaws.com/v1/repos/riches-configuration
        cd riches-configuration
        ls
        cat values-template.yaml | envsubst > ./values.yaml
        cat ./values.yaml
        git status
        git config user.email "anyone@example.com"
        git config user.name "RichesBank Developer"
        git add .
        git commit -m "Updated image tag to $IMAGE_TAG"
        git log --oneline
        git remote -v
        git push -u origin main
      ### Archive files to post-process including review with Amazon Bedrock.
      - cd $CODEBUILD_SRC_DIR
      # src
      - zip -q -r src.zip src/
      # post-process
      - zip -q -r post-process.zip post-process/
    finally:
      # Vulnerability Report -> GenAI (Bedrock + Claude) -> Slack 연계 구성을 위한 정보 수집
      - |
        echo "### CodeBuild Artifacts ###"
        echo $CODEBUILD_SRC_DIR/artifacts
artifacts:
  files:
    - spotbugs.xml
    - spotbugs.json
    - build_output.txt
    - source_version.txt
    - pom.xml
    - src.zip
    - postprocess.yaml
    - post-process.zip
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-artifacts.html
  # https://repost.aws/questions/QU2bJmmLUlRNm9voFCsFFIHQ/is-there-a-way-to-change-the-name-of-the-artifact-getting-stored-in-s3-during-build-stage-of-codepipeline
  # If type is set to CODEPIPELINE, AWS CodePipeline ignores this value if specified. This is because CodePipeline manages its build output names instead of AWS CodeBuild.
  # name: build/${CODEBUILD_RESOLVED_SOURCE_VERSION}

  # Semantic Versioning도 Pipeline에 속한 CodeBuild에서는 활성화 불가하므로 사용되지 않음
  # name: riches-artifact-$(date '+%Y-%m-%d-%H-%M-%S')
  # Following is not used the artifact namespace type is CodePipeline.
  # s3-prefix: $CODEBUILD_RESOLVED_SOURCE_VERSION
#cache:
#  paths:
#    - '/root/.gradle/caches/**/*'
